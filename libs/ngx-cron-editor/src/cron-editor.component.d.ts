import { OnInit, OnDestroy } from '@angular/core';
import { CronOptions } from './CronOptions';
import { ControlValueAccessor, FormBuilder } from '@angular/forms';
import { ThemePalette } from '@angular/material/core';
import { MatTab, MatTabChangeEvent } from '@angular/material/tabs';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare const CRON_VALUE_ACCESSOR: any;
export declare class CronGenComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private fb;
    tabIndex: number;
    backgroundColor: ThemePalette;
    color: ThemePalette;
    disabled: boolean;
    options: CronOptions;
    activeTab: string;
    selectOptions: {
        months: string[];
        monthWeeks: string[];
        days: string[];
        minutes: string[];
        fullMinutes: string[];
        seconds: string[];
        hours: string[];
        monthDays: string[];
        monthDaysWithLasts: string[];
        monthDaysWithOutLasts: string[];
        hourTypes: string[];
    };
    minutesTab: MatTab;
    hourlyTab: MatTab;
    dailyTab: MatTab;
    weeklyTab: MatTab;
    monthlyTab: MatTab;
    yearlyTab: MatTab;
    advancedTab: MatTab;
    formSub: Subscription;
    touched: boolean;
    allForm: import("@angular/forms").FormGroup<{
        cronType: import("@angular/forms").FormControl<"unknown" | "minutely" | "hourly" | "daily" | "weekly" | "monthly" | "yearly">;
        seconds: import("@angular/forms").FormControl<string>;
        minutes: import("@angular/forms").FormControl<string>;
        minutesPer: import("@angular/forms").FormControl<string>;
        hours: import("@angular/forms").FormControl<string>;
        hoursPer: import("@angular/forms").FormControl<string>;
        hoursType: import("@angular/forms").FormControl<string>;
        days: import("@angular/forms").FormControl<string>;
        daysPer: import("@angular/forms").FormControl<string>;
        months: import("@angular/forms").FormControl<string>;
        monthsInc: import("@angular/forms").FormControl<string>;
        day: import("@angular/forms").FormControl<string>;
        monthsWeek: import("@angular/forms").FormControl<string>;
        weekdaysOnly: import("@angular/forms").FormControl<boolean>;
        specificWeekDay: import("@angular/forms").FormControl<boolean>;
        specificMonthWeek: import("@angular/forms").FormControl<boolean>;
        MON: import("@angular/forms").FormControl<boolean>;
        TUE: import("@angular/forms").FormControl<boolean>;
        WED: import("@angular/forms").FormControl<boolean>;
        THU: import("@angular/forms").FormControl<boolean>;
        FRI: import("@angular/forms").FormControl<boolean>;
        SAT: import("@angular/forms").FormControl<boolean>;
        SUN: import("@angular/forms").FormControl<boolean>;
        expression: import("@angular/forms").FormControl<string>;
    }>;
    onChange: (value: any) => void;
    onTouched: () => void;
    get isCronFlavorQuartz(): boolean;
    get isCronFlavorStandard(): boolean;
    get yearDefaultChar(): "*" | "";
    get weekDayDefaultChar(): "*" | "?";
    get monthDayDefaultChar(): "*" | "?";
    constructor(fb: FormBuilder);
    onTabChange(tabChangeEvent: MatTabChangeEvent): void;
    ngOnInit(): Promise<void>;
    ngOnDestroy(): void;
    private computeCron;
    private computeMinutesCron;
    private computeHourlyCron;
    private computeDailyCron;
    private computeEveryDaysCron;
    private computeEveryWeekdayCron;
    private computeWeeklyCron;
    private computeMonthlyCron;
    private computeYearlyCron;
    private computeAdvancedExpression;
    dayDisplay(day: string): string;
    monthWeekDisplay(monthWeekNumber: string): string;
    monthDisplay(month: string): string;
    monthDayDisplay(month: string | number): string;
    private getAmPmHour;
    private getHourType;
    private hourToCron;
    private handleModelChange;
    private cronIsValid;
    private getOrdinalSuffix;
    private getSelectOptions;
    private getRange;
    writeValue(obj: string | null): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    markAsTouched(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CronGenComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CronGenComponent, "cron-editor", never, { "backgroundColor": { "alias": "backgroundColor"; "required": false; }; "color": { "alias": "color"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, {}, never, never, false, never>;
}
